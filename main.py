import logging
from aiogram import Bot, Dispatcher, types
from aiogram.utils.markdown import hide_link
# from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.dispatcher.filters import Text
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
import random
good = ["—Ö–æ—Ä–æ—à", "–∫–ª–∞—Å", "–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ", "–∑–¥–æ—Ä–æ–≤", "–æ–∫","–æ—Ç–ª–∏—á–Ω–æ"]
positive_messages = ["—É –º–µ–Ω—è —Ç–æ–∂–µ", "–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ", "–∑–¥–æ—Ä–æ–≤–æ","–æ—Ç–ª–∏—á–Ω–æ"]
storage = MemoryStorage()
bad = ["–ø–ª–æ—Ö","—É–∂–∞—Å","–≥—Ä—É—Å—Ç"," –æ—Ç–≤—Ä–∞—Ç"]
bad_messages = ["–∂–∞–ª—å","–¥–æ—Å–∞–¥–Ω–æ"]
f = ['–§–∞–∫—Ç –æ –≥–∞—Ä—Ä–∏ –ø–æ—Ç—Ç–µ—Ä–µ ‚Ññ1/n',"–î–æ 2008-–≥–æ –≥–æ–¥–∞ –±—ã–ª–æ –ø—Ä–æ–¥–∞–Ω–æ –±–æ–ª–µ–µ 400 –º–∏–ª–ª–∏–æ–Ω–æ–≤ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –∫–Ω–∏–≥ –æ –ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä–µ, –∏ –æ–Ω–∏ –±—ã–ª–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –Ω–∞ 67 —è–∑—ã–∫–æ–≤./n"]
g = ['–§–∞–∫—Ç –æ –≥–∞—Ä—Ä–∏ –ø–æ—Ç—Ç–µ—Ä–µ ‚Ññ2/n','–ö–æ–≥–¥–∞ ¬´–ù–∞–∑–∞–¥ –≤ –ë—É–¥—É—â–µ–µ¬ª –≤—ã—à–µ–ª –≤ –∫–∏–Ω–æ –≤ –ê–≤—Å—Ç—Ä–∞–ª–∏–∏, –ú–∞–π–∫–ª—É –î–∂–µ–π –§–æ–∫—Å—É –ø—Ä–∏—à–ª–æ—Å—å —Å–Ω—è—Ç—å—Å—è –≤ —Ç–µ–ª–µ–≤–∏–∑–∏–æ–Ω–Ω–æ–º —Ä–æ–ª–∏–∫–µ –¥–ª—è –∞–≤—Å—Ç—Ä–∞–ª–∏–π—Å–∫–æ–≥–æ —Ç–µ–ª–µ–≤–∏–¥–µ–Ω–∏—è –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ü–µ–ø–ª—è–Ω–∏—è –∑–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –Ω–∞ —Å–∫–µ–π—Ç–±–æ—Ä–¥–µ.\n']
d = ['–§–∞–∫—Ç –æ –≥–∞—Ä—Ä–∏ –ø–æ—Ç—Ç–µ—Ä–µ ‚Ññ3/n','–ò–º—è –í–æ–ª–¥–µ–º–æ—Ä—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ—Ç —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏—Ö —Å–ª–æ–≤, –æ–∑–Ω–∞—á–∞—é—â–∏—Ö "–±–µ–≥—Å—Ç–≤–æ –æ—Ç —Å–º–µ—Ä—Ç–∏", –∏ –µ–≥–æ –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–µ–ª—å—é —è–≤–ª—è–µ—Ç—Å—è –ø–æ–±–µ–¥–∞ –Ω–∞–¥ —Å–º–µ—Ä—Ç—å—é. –í–æ –≤—Ç–æ—Ä–æ–º —Ä–æ–º–∞–Ω–µ –æ –ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä–µ –†–æ—É–ª–∏–Ω–≥ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ —Ñ—Ä–∞–∑–∞ "I am Lord Voldemort" ‚Äì —ç—Ç–æ –∞–Ω–∞–≥—Ä–∞–º–º–∞ –æ—Ç "Tom Marvolo Riddle", —á—Ç–æ –±—ã–ª–æ –µ–≥–æ –Ω–∞—Å—Ç–æ—è—â–∏–º –∏–º–µ–Ω–µ–º./n']
s = ['–§–∞–∫—Ç –æ –≥–∞—Ä—Ä–∏ –ø–æ—Ç—Ç–µ—Ä–µ ‚Ññ4/n','–†–æ–º–∞–Ω–∞—Ö –æ –ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä–µ —Ü–≤–µ—Ç–∞ –∏–≥—Ä–∞—é—Ç –æ—á–µ–Ω—å –≤–∞–∂–Ω—É—é —Ä–æ–ª—å. –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç—Ç–µ–Ω–∫–∏ –∫—Ä–∞—Å–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ —Å–∏–º–≤–æ–ª–∏–∑–∏—Ä—É—é—Ç –¥–æ–±—Ä–æ—Ç—É –∏ –≤–µ–ª–∏–∫–æ–¥—É—à–∏–µ. –≠—Ç–∏ –æ—Ç—Ç–µ–Ω–∫–∏ –º–æ–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å –≤ –∫—Ä–∞—Å–Ω–æ–π –æ–¥–µ–∂–¥–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ –•–æ–≥–≤–∞—Ä—Ç—Å–∞ ‚Äì –ì—Ä–∏—Ñ—Ñ–∏–Ω–¥–æ—Ä–∞. –¢–∞–∫–∂–µ –∫—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫—Ä–∞—Å–Ω—ã—Ö —á–µ—Ä–Ω–∏–ª–∞—Ö –ì–∞—Ä—Ä–∏ –∏ –º–∞–ª–∏–Ω–æ–≤–æ–º –ø–æ–µ–∑–¥–µ-—ç–∫—Å–ø—Ä–µ—Å—Å–µ –≤ –•–æ–≥–≤–∞—Ä—Ç—Å. –£ —Å–µ–º—å–∏ –£–∏–∑–ª–∏ ‚Äì —Ä—ã–∂–∏–µ –≤–æ–ª–æ—Å—ã –∏ –∫—Ä–∞—Å–Ω–∞—è –∫—Ä—ã—à–∞ –¥–æ–º–∞. –ó–µ–ª–µ–Ω—ã–π –∂–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –∞—Å—Å–æ—Ü–∏–∏—Ä—É–µ—Ç—Å—è —Å –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏./n']
r = ["–§–∞–∫—Ç –æ –≥–∞—Ä—Ä–∏ –ø–æ—Ç—Ç–µ—Ä–µ ‚Ññ1 \n,–î–æ 2008-–≥–æ –≥–æ–¥–∞ –±—ã–ª–æ –ø—Ä–æ–¥–∞–Ω–æ –±–æ–ª–µ–µ 400 –º–∏–ª–ª–∏–æ–Ω–æ–≤ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –∫–Ω–∏–≥ –æ –ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä–µ, –∏ –æ–Ω–∏ –±—ã–ª–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –Ω–∞ 67 —è–∑—ã–∫–æ–≤.\n",
     "–§–∞–∫—Ç –æ –ù–∞–∑–∞–¥ –≤ –ë—É–¥—É—â–µ–µ ‚Ññ2 \n','–ö–æ–≥–¥–∞ ¬´–ù–∞–∑–∞–¥ –≤ –ë—É–¥—É—â–µ–µ¬ª –≤—ã—à–µ–ª –≤ –∫–∏–Ω–æ –≤ –ê–≤—Å—Ç—Ä–∞–ª–∏–∏, –ú–∞–π–∫–ª—É –î–∂–µ–π –§–æ–∫—Å—É –ø—Ä–∏—à–ª–æ—Å—å —Å–Ω—è—Ç—å—Å—è –≤ —Ç–µ–ª–µ–≤–∏–∑–∏–æ–Ω–Ω–æ–º —Ä–æ–ª–∏–∫–µ –¥–ª—è –∞–≤—Å—Ç—Ä–∞–ª–∏–π—Å–∫–æ–≥–æ —Ç–µ–ª–µ–≤–∏–¥–µ–Ω–∏—è \n –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ü–µ–ø–ª—è–Ω–∏—è –∑–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –Ω–∞ —Å–∫–µ–π—Ç–±–æ—Ä–¥–µ.\n"]
inline_btn_1 = InlineKeyboardButton('–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä', callback_data='button1')
inline_btn_2 = InlineKeyboardButton("–í–ª–∞—Å—Ç–µ–ª–∏–Ω –∫–æ–ª–µ—Ü", callback_data='button2')
inline_btn_3 = InlineKeyboardButton("–¥–∞", callback_data='button3')
inline_btn_4 = InlineKeyboardButton("–Ω–µ—Ç", callback_data='button4')
inline_btn_5 = InlineKeyboardButton("38", callback_data='vrant_1')
inline_btn_7 = InlineKeyboardButton("37", callback_data='vrant_2')
inline_btn_8 = InlineKeyboardButton("36", callback_data='otvet1')
inline_btn_9 = InlineKeyboardButton("33", callback_data='vrant_3')
inline_kb1 = InlineKeyboardMarkup().add(inline_btn_1).add(inline_btn_2)
inline_kb2 = InlineKeyboardMarkup().add(inline_btn_3, inline_btn_4)
inline_kb3 = InlineKeyboardMarkup(row_width=2).add(inline_btn_5, inline_btn_7, inline_btn_8, inline_btn_9)



class States(StatesGroup):
    dela = State()  # Will be represented in storage as 'Form:name  # Will be represented in storage as 'Form:gender'
    stets2 = State()
    test_stet = State()
    fact_stet = State()
    test_g_1  = State()
    otvet_1 = State()
    vopros2 = State()
    otvet_2 = State()
    vopros3 = State()
    otvet_3 = State()
    vopros4 = State()
    otvet_4 = State()
    vopros5 = State()
    otvet_5 = State()

bot = Bot(token="5819552530:AAHoHsDzP_QwETxdK1ICtbSnED0oCxLbNXA")
dp = Dispatcher(bot, storage=storage)
logging.basicConfig(level=logging.INFO)


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç —è –∫–∏–Ω–æ–±–æ—Ç, –∫–∞–∫ –¥–µ–ª–∞?")
    await States.dela.set()


@dp.message_handler(state=States.dela)
async def dela(message: types.Message, state):
    await state.update_data(dela=message.text)
    answer = await state.get_data()
    value = answer["dela"].strip().lower()
    if sum([value.find(i)!=-1 for i in good]):
        await message.answer(random.choice(positive_messages))
        if random.choice([True, False]):
            await bot.send_sticker(message.chat.id, "CAACAgIAAxkBAAEG_59jqGSH1Kht1f396OvVF5Fr3X5TyQACkCQAAtAYSEl1lgatPhR9tiwE")
        else:
            await bot.send_message(message.chat.id, text="üòå")
        await message.answer("—Ö–æ—á–µ—à—å –ø–æ—Ä–µ—à–∞—Ç—å —Ç–µ—Å—Ç—ã –æ —Ñ–∏–ª—å–º–∞—Ö –∏–ª–∏ —É–∑–Ω–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ –Ω–∏—Ö")
        await States.stets2.set()
    elif sum([value.find(i)!=-1 for i in bad]):
        await message.answer(random.choice(bad_messages))
        if random.choice([True, False]):
            await bot.send_sticker(message.chat.id, "CAACAgIAAxkBAAEG_6FjqGS5L4I-u1TSgl0emKBRmbPldAACgSUAAkPCSEnndj5CbFMtjiwE")
        else:
            await bot.send_message(message.chat.id, text="üò≠")
        await message.answer("—Ö–æ—á–µ—à—å –ø–æ—Ä–µ—à–∞—Ç—å —Ç–µ—Å—Ç—ã –æ —Ñ–∏–ª—å–º–∞—Ö –∏–ª–∏ —É–∑–Ω–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ –Ω–∏—Ö")
        await States.stets2.set()

    else:
        await message.answer("—á—Ç–æ —ç—Ç–æ, —è –Ω–µ –∑–Ω–∞—é –ø–æ–º–æ–≥–∏")
        await bot.send_sticker(message.chat.id, "CAACAgIAAxkBAAEG_6NjqGUhKyqVEIqKqAaxRV3o5gOgowACqCMAArIxQUkzscbk9NCHLSwE")


@dp.message_handler(state=States.stets2)
async def test_fact(message: types.Message, state):
    await state.update_data(stets2=message.text)
    answer = await state.get_data()
    value = answer["stets2"].strip().lower()
    if sum([value.find(i)!=-1 for i in ["—Ç–µ—Å—Ç"]]):
        await bot.send_sticker(message.chat.id, "CAACAgIAAxkBAAEG_6hjqGWatiQkyexNzdOzQ0GwCoBS7QACkCUAAv-NQEnoUdcdJFKzZywE")
        await message.answer("–ü–û–î–¢–í–ï–†–î–ò–¢–ï")
        await States.test_stet.set()
    elif sum([value.find(i)!=-1 for i in ["—Ñ–∞–∫—Ç"]]):
        await bot.send_sticker(message.chat.id, "CAACAgIAAxkBAAEG_7JjqGZgQhH4BPLCSblRpanOtx572AAC4x8AAimVQElccyotxFi3hiwE")
        await message.answer("–ü–û–î–¢–í–ï–†–î–ò–¢–ï")
        await States.fact_stet.set()


@dp.message_handler(state=States.test_stet)
async def test_fact(message: types.Message, state):
    await state.update_data(stets2=message.text)
    await message.answer("–≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —Ç–µ—Å—Ç: –ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä –∏–ª–∏ –í–ª–∞—Å—Ç–µ–ª–∏–Ω –∫–æ–ª–µ—Ü")
    await States.test_g_1.set()

#–ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å

@dp.message_handler(state=States.test_g_1)
async def test_GP(message: types.Message, state):
    await state.update_data(test_g_1 = message.text)
    answer = await state.get_data()
    value = answer["test_g_1"].strip().lower()
    if value == "–≥–∞—Ä—Ä–∏ –ø–æ—Ç—Ç–µ—Ä":
        await message.answer("–ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å\n–°–∫–æ–ª—å–∫–æ –ø–æ–¥–∞—Ä–∫–æ–≤ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø–æ–¥–∞—Ä–∏–ª–∏ –î–∞–¥–ª–∏ –î—É—Ä—Å–ª—é –Ω–∞ –µ–≥–æ –æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç–∏–ª–µ—Ç–Ω–µ–π?\n38  36\n37   35 ")
        await States.otvet_1.set()
    else:
        await message.answer("–Ω–µ—Ç")


@dp.message_handler(state=States.otvet_1)
async def test_GP(message: types.Message, state):
    await state.update_data(otvet_1=message.text)
    answer = await state.get_data()
    value = answer["otvet_1"].strip().lower()
    if value == "36":
        await message.answer("–õ—É—á—à–∏–π –∑–Ω–∞—Ç–æ–∫!")
        await bot.send_sticker(message.chat.id, "CAACAgIAAxkBAAEG_79jqGcjTip9LYNgya6jsvz_u_NWZwAC4x8AAimVQElccyotxFi3hiwE")
        await message.answer("–ø—Ä–æ–¥–æ–ª–∂–∏–º?")
        await States.vopros2.set()
    else:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –Ω–æ –Ω–µ –∑–¥–∞–≤–∞–π—Å—è, –ø—Ä–æ–¥–æ–ª–∂–∞–π!")
        await bot.send_sticker(message.chat.id, "CAACAgIAAxkBAAEG_7tjqGbA7ELPPJejrnRj0xvERdwRpgACkCQAAtAYSEl1lgatPhR9tiwE")

#–í—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å

@dp.message_handler(state=States.vopros2)
async  def vopros1_2(message: types.Message, state):
    await state.update_data(vopros2=message.text)
    answer = await state.get_data()
    value = answer["vopros2"].strip().lower()
    if value == "–¥–∞":
        await message.answer("–í—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å\n–ß—Ç–æ –±—ã–ª–æ —É –†—É–±–µ—É—Å–∞ –•–∞–≥—Ä–∏–¥–∞ –≤–º–µ—Å—Ç–æ –≤–æ–ª—à–µ–±–Ω–æ–π –ø–∞–ª–æ—á–∫–∏? \n–ü–æ–¥–≤–µ—Å–∫–∞  –§–ª—è–∂–∫–∞\n–ü–æ—Å–æ—Ö   –ó–æ–Ω—Ç–∏–∫ ")
        await States.otvet_2.set()
    elif value == "–Ω–µ—Ç":
        await message.answer("–ø–æ—Ç–≤–µ—Ä–¥–∏—Ç–µ")
        await States.stets2.set()


@dp.message_handler(state=States.otvet_2)
async def test_GP(message: types.Message, state):
    await state.update_data(otvet_2=message.text)
    answer = await state.get_data()
    value = answer["otvet_2"].strip().lower()
    if value == "–∑–æ–Ω—Ç–∏–∫":
        await message.answer("–û—á–µ–Ω—å –∑–¥–æ—Ä–æ–≤–æ!")
        await bot.send_sticker(message.chat.id, "CAACAgIAAxkBAAEG_79jqGcjTip9LYNgya6jsvz_u_NWZwAC4x8AAimVQElccyotxFi3hiwE")
        await message.answer("–ø—Ä–æ–¥–æ–ª–∂–∏–º?")
        await States.vopros3.set()
    else:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –Ω–æ –Ω–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π –¥–µ–ª–∞—Ç—å!")
        await bot.send_sticker(message.chat.id, "CAACAgIAAxkBAAEG_7tjqGbA7ELPPJejrnRj0xvERdwRpgACkCQAAtAYSEl1lgatPhR9tiwE")

#–¢—Ä–µ—Ç–∏–π –≤–æ–ø—Ä–æ—Å


@dp.message_handler(state=States.vopros3)
async  def vopros1_3(message: types.Message, state):
    await state.update_data(vopros3=message.text)
    answer = await state.get_data()
    value = answer["vopros3"].strip().lower()
    if value == "–¥–∞":
        await message.answer("–¢—Ä–µ—Ç–∏–π –≤–æ–ø—Ä–æ—Å\n–° –∫–∞–∫–æ–≥–æ –∂–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω–æ–≥–æ –≤–æ–∫–∑–∞–ª–∞ –≤ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–º –õ–æ–Ω–¥–æ–Ω–µ —É–µ–∑–∂–∞–ª–∏ —É—á–∏—Ç—å—Å—è –≤ –•–æ–≥–≤–∞—Ä—Ç—Å —é–Ω—ã–µ –≤–æ–ª—à–µ–±–Ω–∏–∫–∏?  \n–í–∞—Ç–µ—Ä–ª–æ–æ  –ß–æ—Ä–ª–∏–≤—É–¥\n–ö–∏–Ω–≥—Å-–ö—Ä–æ—Å—Å   –ü–∞–¥–¥–∏–Ω–≥—Ç–æ–Ω ")
        await States.otvet_3.set()
    elif value == "–Ω–µ—Ç":
        await message.answer("–ø–æ—Ç–≤–µ—Ä–¥–∏—Ç–µ")
        await States.stets4.set()

@dp.message_handler(state=States.otvet_3)
async def test_GP(message: types.Message, state):
    await state.update_data(otvet_3=message.text)
    answer = await state.get_data()
    value = answer["otvet_3"].strip().lower()
    if value == "–∫–∏–Ω–≥—Å-–∫—Ä–æ—Å—Å":
        await message.answer("–ú–æ–ª–æ–¥–µ—Ü! –î–≤–∏–≥–∞–π—Å—è –¥–∞–ª—å—à–µ!")
        await bot.send_sticker(message.chat.id, "CAACAgIAAxkBAAEG_79jqGcjTip9LYNgya6jsvz_u_NWZwAC4x8AAimVQElccyotxFi3hiwE")
        await message.answer("–ø—Ä–æ–¥–æ–ª–∂–∏–º?")
        await States.vopros4.set()
    else:
        await message.answer("–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –±—É–¥–µ—Ç –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
        await bot.send_sticker(message.chat.id, "CAACAgIAAxkBAAEG_7tjqGbA7ELPPJejrnRj0xvERdwRpgACkCQAAtAYSEl1lgatPhR9tiwE")

#–ß–µ—Ç–≤–µ—Ä—Ç—ã–π –≤–æ–ø—Ä–æ—Å


@dp.message_handler(state=States.vopros4)
async  def vopros1_4(message: types.Message, state):
    await state.update_data(vopros4=message.text)
    answer = await state.get_data()
    value = answer["vopros4"].strip().lower()
    if value == "–¥–∞":
        await message.answer("–ß–µ—Ç–≤–µ—Ä—Ç—ã–π –≤–æ–ø—Ä–æ—Å\n–ß—Ç–æ —Ö—Ä–∞–Ω–∏–ª–æ—Å—å –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ 687 –≤ –±–∞–Ω–∫–µ –¥–ª—è –≤–æ–ª—à–µ–±–Ω–∏–∫–æ–≤-–ì—Ä–∏–Ω–≥–æ—Ç—Ç—Å?  \n–ó–æ–ª–æ—Ç–æ –ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä–∞  –ö—Ä–µ—Å—Ç—Ä–∞–∂\n–§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π –∫–∞–º–µ–Ω—å   –í–∞–∂–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã ")
        await States.otvet_4.set()
    elif value == "–Ω–µ—Ç":
        await message.answer("–ø–æ—Ç–≤–µ—Ä–¥–∏—Ç–µ")
        await States.stets5.set()

@dp.message_handler(state=States.otvet_4)
async def test_GP(message: types.Message, state):
    await state.update_data(otvet_4=message.text)
    answer = await state.get_data()
    value = answer["otvet_4"].strip().lower()
    if value == "–∑–æ–ª–æ—Ç–æ –≥–∞—Ä—Ä–∏ –ø–æ—Ç—Ç–µ—Ä–∞":
        await message.answer("Beautiful!")
        await bot.send_sticker(message.chat.id, "CAACAgIAAxkBAAEG_79jqGcjTip9LYNgya6jsvz_u_NWZwAC4x8AAimVQElccyotxFi3hiwE")
        await message.answer("–ø—Ä–æ–¥–æ–ª–∂–∏–º?")
        await States.vopros5.set()
    else:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –Ω–æ –Ω–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è!")
        await bot.send_sticker(message.chat.id, "CAACAgIAAxkBAAEG_7tjqGbA7ELPPJejrnRj0xvERdwRpgACkCQAAtAYSEl1lgatPhR9tiwE")

#–ü—è—Ç—ã–π –≤–æ–ø—Ä–æ—Å


@dp.message_handler(state=States.vopros5)
async  def vopros1_5(message: types.Message, state):
    await state.update_data(vopros5=message.text)
    answer = await state.get_data()
    value = answer["vopros5"].strip().lower()
    if value == "–¥–∞":
        await message.answer("–ß–µ—Ç–≤–µ—Ä—Ç—ã–π –≤–æ–ø—Ä–æ—Å\n–ß—Ç–æ —Ö—Ä–∞–Ω–∏–ª–æ—Å—å –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ 687 –≤ –±–∞–Ω–∫–µ –¥–ª—è –≤–æ–ª—à–µ–±–Ω–∏–∫–æ–≤-–ì—Ä–∏–Ω–≥–æ—Ç—Ç—Å?  \n–ó–æ–ª–æ—Ç–æ –ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä–∞  –ö—Ä–µ—Å—Ç—Ä–∞–∂\n–§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π –∫–∞–º–µ–Ω—å   –í–∞–∂–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã ")
        await States.otvet_5.set()
    elif value == "–Ω–µ—Ç":
        await message.answer("–ø–æ—Ç–≤–µ—Ä–¥–∏—Ç–µ")
        await States.stets5.set()

@dp.message_handler(state=States.otvet_4)
async def test_GP(message: types.Message, state):
    await state.update_data(otvet_4=message.text)
    answer = await state.get_data()
    value = answer["otvet_4"].strip().lower()
    if value == "–∑–æ–ª–æ—Ç–æ –≥–∞—Ä—Ä–∏ –ø–æ—Ç—Ç–µ—Ä–∞":
        await message.answer("Beautiful!")
        await bot.send_sticker(message.chat.id, "CAACAgIAAxkBAAEG_79jqGcjTip9LYNgya6jsvz_u_NWZwAC4x8AAimVQElccyotxFi3hiwE")
        await message.answer("–ø—Ä–æ–¥–æ–ª–∂–∏–º?")
        await States.vopros5.set()
    else:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –Ω–æ –Ω–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è!")
        await bot.send_sticker(message.chat.id, "CAACAgIAAxkBAAEG_7tjqGbA7ELPPJejrnRj0xvERdwRpgACkCQAAtAYSEl1lgatPhR9tiwE")





#–∫–æ–Ω–µ—Ü –≤–æ–ø—Ä–æ—Å–∞
@dp.message_handler(state=States.fact_stet)
async def fact(message: types.Message, state):
    await state.update_data(fact_stet=message.text)
    a = random.choice(r)
    await message.answer(f"{a}")
    await States.stets2.set()





if __name__ == '__main__':
    executor.start_polling(dp)